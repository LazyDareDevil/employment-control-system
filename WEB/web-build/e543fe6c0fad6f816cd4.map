{"version":3,"sources":["C:/repos/employment-control-system/WEB/SignIn/styles.js","C:/repos/employment-control-system/WEB/SignIn/Form.js","C:/repos/employment-control-system/WEB/SignIn/AuthWindow.js","C:/repos/employment-control-system/WEB/MainApp/FooterMenu.js","C:/repos/employment-control-system/WEB/MainApp/ParamsWindow/ParameterButton.js","C:/repos/employment-control-system/WEB/MainApp/ParamsWindow/ParametersStyles.js","C:/repos/employment-control-system/WEB/MainApp/ParamsWindow/BottomButton.js","C:/repos/employment-control-system/WEB/MainApp/ParamsWindow/WorkspaceParameters.js","C:/repos/employment-control-system/WEB/MainApp/MapComponents/TouchableOpacityG.js","C:/repos/employment-control-system/WEB/MainApp/MapComponents/WorkplaceOnMap.js","C:/repos/employment-control-system/WEB/MainApp/MapComponents/Map.js","C:/repos/employment-control-system/WEB/MainApp/MapComponents/MapWindowStyles.js","C:/repos/employment-control-system/WEB/MainApp/MapComponents/MapBottomButtons.js","C:/repos/employment-control-system/WEB/MainApp/MapComponents/MapWindow.js","C:/repos/employment-control-system/WEB/MainApp/Settings.js","C:/repos/employment-control-system/WEB/MainApp/Header/HeaderStyles.js","C:/repos/employment-control-system/WEB/MainApp/Header/MainHeader.js","C:/repos/employment-control-system/WEB/MainApp/Timer/TimerStyles.js","C:/repos/employment-control-system/WEB/MainApp/MainApp.js","C:/repos/employment-control-system/WEB/MainApp/Timer/SeatTimer.js","C:/repos/employment-control-system/WEB/App.js","C:/repos/employment-control-system/WEB/web-build/register-service-worker.js","C:/repos/employment-control-system/WEB/assets/fonts/Roboto-Light.ttf","C:/repos/employment-control-system/WEB/assets/fonts/Roboto-Medium.ttf"],"names":["styles","StyleSheet","create","container","flex","backgroundColor","justifyContent","alignContent","signWindow","width","maxWidth","height","flexDirection","alignSelf","appName","color","fontSize","borderWidth","borderStyle","borderColor","borderRadius","padding","fontFamily","shadowRadius","shadowOpacity","authText","marginVertical","textShadowRadius","textShadowColor","form","field","paddingLeft","minHeight","marginBottom","signInBtn","marginTop","Form","loginInput","passwordInput","View","style","TextInput","placeholder","textContentType","onChangeText","val","secureTextEntry","AuthWindow","props","handleButtonClick","state","login","password","setState","correctData","alert","setLogin","setPassword","checkData","this","KeyboardAvoidingView","behavior","enabled","onPress","Component","FooterMenu","setColor","buttonName","currentState","textStyle","changeWindow","firstButtonText","isWorkspaceChosen","vertical","name","ParameterButton","setOpacity","index","chosenParams","setIcon","buttonPressed","changeChosenParams","toString","TouchableHighlight","underlayColor","button","background","alignItems","edgeBlock","edgeBlockText","centerBlock","flexWrap","BottomButtom","leaveButtonPressed","setParamsSelected","WorkspaceParameters","chosenParameters","full","disabled","AnimatedG","Animated","createAnimatedComponent","G","TouchableOpacityG","componentDidUpdate","prevProps","prevState","_opacityInactive","setOpacityTo","value","duration","timing","anim","toValue","easing","Easing","inOut","quad","useNativeDriver","start","touchableHandleActivePressIn","e","dispatchConfig","registrationName","_opacityActive","onPressIn","touchableHandleActivePressOut","onPressOut","touchableHandlePress","touchableHandleLongPress","onLongPress","activeOpacity","_getChildStyleOpacityWithDefault","childStyle","flattenStyle","Array","isArray","result","i","styleLength","length","computedStyle","key","opacity","Value","children","defaultProps","WorkplaceOnMap","setCoords","x","y","orientation","x_text","y_text","x_circle","y_circle","num","coords","setSeat","stroke","rx","fontWeight","fill","setStatusCircle","Map","seatNumber","areParamsSelected","workspaceNumber","avialableSeats","indexOf","setLocalSeat","coordsX","coordsY","React","createElement","Line","x1","y1","x2","y2","strokeWidth","strokeLinecap","path","generator","viewBox","id","d","locationX","locationY","AppRegistry","registerComponent","topBlock","bottomBlock","takeButton","anotherPlaceButton","buttonText","seatInput","textAlign","paddingHorizontal","MapBottomButtons","takePlacePressed","isNaN","changeWorkspace","MapWindow","seat","showInput","parseInt","maxLength","transparent","icon","Workspace","confirmExit","time","confirm","checkExit","mainView","text","exitButton","headerStyles","header","maxHeight","left","marginLeft","right","marginRight","elem","MainHeader","setWorkspaceText","setTimer","timerOn","timerTime","substr","timerStyles","block","borderBottomColor","borderBottomWidth","paddingBottom","stopWatch","leaveButton","yourTimeButton","MainApp","formatTime","window","switchFlag","startTimer","timerStart","Date","now","timer","setInterval","clearInterval","ms","seconds","Math","floor","slice","minutes","flag","array","setMainWindow","title","App","renderView","fontLoaded","token","someLogin","somePassword","fetch","method","headers","Accept","body","JSON","stringify","username","then","response","json","responseJson","data","catch","error","Font","require","navigator","addEventListener","serviceWorker","register","scope","info","console","module","exports"],"mappings":"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","file":"static/js/app.e67fdcc1.chunk.js","sourcesContent":["import {StyleSheet} from 'react-native'\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 3,\r\n        backgroundColor: 'rgba(10, 61, 179, 1.0)',\r\n        justifyContent: 'center',\r\n        alignContent: 'center',\r\n    },\r\n    \r\n    signWindow: {\r\n        width: '80%',\r\n        maxWidth: 300,\r\n        height: 'auto',\r\n        flexDirection: 'column',\r\n        alignSelf: 'center',\r\n        justifyContent: 'space-between',\r\n    },\r\n      \r\n    appName: {\r\n        alignSelf: 'center',\r\n        color: 'white',\r\n        fontSize: 35,\r\n        borderWidth: 1,\r\n        borderStyle: 'solid',\r\n        borderColor: 'white',\r\n        borderRadius: 5,\r\n        padding: 20,\r\n        fontFamily: 'roboto-light',\r\n        shadowRadius: 5,\r\n        shadowOpacity: 1\r\n    },\r\n    \r\n    authText: {\r\n        color: 'white',\r\n        fontSize: 20,\r\n        alignSelf: 'center',\r\n        marginVertical: 20,\r\n        fontFamily: 'roboto-light',\r\n        textShadowRadius: 5,\r\n        textShadowColor: 'black'\r\n        // shadowRadius: 3,\r\n        // shadowOpacity: 1\r\n    },\r\n    \r\n    form: {\r\n        height: '30%',\r\n        color: 'rgba(0,0,0,0.3)',\r\n        flexDirection: 'column',\r\n        justifyContent: \"space-between\",\r\n    },\r\n  \r\n    field: {\r\n        paddingLeft: 20,\r\n        minHeight: 50,\r\n        height: '40%',\r\n        backgroundColor: 'white',\r\n        borderRadius: 5,\r\n        shadowRadius: 10,\r\n        shadowOpacity: 0.5,\r\n        fontFamily: 'roboto-light',\r\n        fontSize: 15,\r\n        marginBottom: 10,\r\n        \r\n    },\r\n    \r\n    signInBtn: {\r\n        marginTop: 15,\r\n        alignSelf: 'center',\r\n        backgroundColor: 'rgba(229, 38, 37, 1)',\r\n        justifyContent: 'center',\r\n        minHeight: 50,\r\n        height: '12%',\r\n        width: '35%',\r\n        borderRadius: 100,\r\n        shadowRadius: 10,\r\n        shadowOpacity: 0.5,\r\n    }\r\n});\r\n\r\nexport default styles;","import React from 'react';\r\nimport { View, TextInput } from 'react-native';\r\nimport styles from './styles'\r\n\r\nconst Form = ({loginInput, passwordInput}) => (\r\n    <View style={styles.form}>\r\n        <TextInput style={styles.field}\r\n            placeholder={'login'} \r\n            textContentType={\"username\"}\r\n            onChangeText={val => loginInput(val)}\r\n        />\r\n        <TextInput style={styles.field}\r\n            placeholder={'password'}\r\n            textContentType={'password'}\r\n            onChangeText={val => passwordInput(val)}\r\n            secureTextEntry={true}\r\n        />\r\n    </View>\r\n)\r\n\r\nexport default Form;\r\n","import React, { Component } from 'react';\r\nimport { View, KeyboardAvoidingView } from 'react-native';\r\nimport { Text, Button } from 'native-base'\r\nimport styles from './styles'\r\nimport Form from './Form'\r\n\r\nexport default class AuthWindow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            login: \"\",\r\n            password: \"\",\r\n            correctData: false\r\n        };\r\n    }\r\n\r\n    handleButtonClick = () => {\r\n        // с проверкой\r\n        if (this.state.login && this.state.password) {\r\n            this.setState({ correctData: true })\r\n            return true\r\n        } else {\r\n            alert('wrong login or password')\r\n            return false\r\n        }\r\n\r\n        // без проверки на пустоту \r\n        // this.setState({ correctData: true })\r\n        // return true\r\n    }\r\n\r\n    setLogin = val => {\r\n        this.setState({ login: val })\r\n    }\r\n\r\n    setPassword = val => {\r\n        this.setState({ password: val })\r\n    }\r\n\r\n    render() {\r\n        var checkData = this.props.checkData\r\n        return (\r\n            <KeyboardAvoidingView style={styles.container} behavior=\"padding\" enabled>\r\n                <View style={styles.signWindow}>\r\n                    <Text style={styles.appName}>App name</Text>\r\n                    <Text style={styles.authText}>Authorization</Text>\r\n                    <Form \r\n                        loginInput={this.setLogin}\r\n                        passwordInput={this.setPassword}\r\n                    />\r\n                    <Button style={styles.signInBtn}\r\n                            onPress={() =>  checkData(this.handleButtonClick(), this.state.login, this.state.password) }\r\n                    >\r\n                        <Text style={{color: 'white', fontFamily: 'roboto-light'}}>Sign in</Text>\r\n                    </Button>\r\n                </View>\r\n            </KeyboardAvoidingView>\r\n        );\r\n    }\r\n}\r\n\r\n","import React, {Component} from 'react';\r\nimport { Footer, FooterTab, Button, Icon, Text} from 'native-base'\r\n\r\nexport default class FooterMenu extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    setColor = (buttonName) => {\r\n        var state = this.props.currentState\r\n        if (state === buttonName)\r\n            return ({color: 'rgba(39, 171, 227, 1)'})\r\n        else return ({color: 'rgba(10, 61, 179, 1.0)'})\r\n    }\r\n\r\n    textStyle = (buttonName) => {\r\n        return ([ {fontSize: 12, fontFamily: 'roboto-light'}, this.setColor(buttonName) ])\r\n    }\r\n\r\n    render() {\r\n        var changeWindow = this.props.changeWindow\r\n        let firstButtonText = this.props.isWorkspaceChosen ? 'Time' : 'Parameters'\r\n        return(\r\n            <Footer>\r\n                <FooterTab style={{backgroundColor: 'white', shadowRadius: 1, shadowOpacity: 0.1}}>\r\n\r\n                    <Button vertical onPress={() => changeWindow('workspace')}>\r\n                        <Icon name='tv' style={this.setColor('workspace')} />\r\n                        <Text style={this.textStyle('workspace')} >\r\n                            {firstButtonText}\r\n                        </Text>\r\n                    </Button>\r\n\r\n                    <Button vertical onPress={() => changeWindow('map')}>\r\n                        <Icon name='pin' style={this.setColor('map')} />\r\n                        <Text style={this.textStyle('map')} >\r\n                            Map\r\n                        </Text>\r\n                    </Button>\r\n\r\n                    <Button vertical onPress={() => changeWindow('settings')}>\r\n                        <Icon name='settings' style={this.setColor('settings')} />\r\n                        <Text style={this.textStyle('settings')} >\r\n                            Settings\r\n                        </Text>\r\n                    </Button>\r\n\r\n                </FooterTab>\r\n            </Footer>\r\n        );\r\n    }\r\n}\r\n\r\n","import React, {Component} from 'react'\r\nimport {View, TouchableHighlight, StyleSheet} from 'react-native'\r\nimport {Icon, Text} from 'native-base'\r\n\r\nexport default class ParameterButton extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    setOpacity = index => {\r\n        return this.props.chosenParams[index] ? 1 : 0.5\r\n    }\r\n\r\n    setColor = index => {\r\n        return this.props.chosenParams[index] ? 'rgba(10, 61, 179, 1.0)' : 'rgb(166, 202, 240)'\r\n    }\r\n\r\n    setIcon = index => {\r\n        return this.props.chosenParams[index] ? 'add-circle' : 'remove-circle-outline'\r\n    }\r\n\r\n    buttonPressed = index => {\r\n        if (!this.props.isWorkspaceChosen) {\r\n            this.props.changeChosenParams(index)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        name = this.props.name.toString()\r\n        const {index} = this.props\r\n        return(\r\n            <TouchableHighlight onPress={() => this.buttonPressed(index)} \r\n                                underlayColor='transparent'\r\n                                style={{height: '20%', width: '60%', maxWidth: 250}}>\r\n                {/* <View style={[styles.button, {opacity: this.setOpacity(index)}]}> */}\r\n                <View style={[styles.button, {backgroundColor: this.setColor(index)}]}>\r\n                    <Icon style={{color: 'white', fontSize: 30}} name={this.setIcon(index)} />\r\n                    <Text style={{color: 'white', fontSize: 12, fontFamily: 'roboto-light'}}>\r\n                        {name}\r\n                    </Text>\r\n                </View>\r\n            </TouchableHighlight>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    background: {\r\n        height: '20%', \r\n        width: '60%', \r\n        maxWidth: 250\r\n    },\r\n\r\n    button: {\r\n        alignItems: 'center',\r\n        backgroundColor: 'rgb(10, 61, 179)',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around',\r\n        borderRadius: 8,\r\n        height: '100%',\r\n        // width: '40%',\r\n        // aspectRatio: 1/1,\r\n        // margin: 10\r\n    }\r\n})","import {StyleSheet} from 'react-native'\r\n\r\nconst styles = StyleSheet.create({\r\n    edgeBlock: {\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n\r\n    edgeBlockText: {\r\n        color: 'white',\r\n        fontFamily: 'roboto-light'\r\n    },\r\n\r\n    centerBlock: {\r\n        // backgroundColor: 'green',\r\n        flex: 5,\r\n        width: '80%',\r\n        alignSelf: 'center',\r\n        alignItems: 'center',\r\n        flexDirection: 'column',\r\n        alignContent: 'center',\r\n        justifyContent: 'space-around',\r\n        flexWrap: 'wrap',\r\n        // backgroundColor: 'yellow'\r\n    },\r\n\r\n    button: {\r\n        backgroundColor: 'rgba(229, 38, 37, 1)', \r\n        height: '75%', \r\n        borderRadius: 8, \r\n        width: '60%',\r\n        justifyContent: 'center',\r\n        maxWidth: 300\r\n    }\r\n})\r\n\r\nexport default styles","import React, {Component} from 'react'\r\n// import {View} from 'react-native'\r\nimport {Button, Text} from 'native-base'\r\nimport styles from './ParametersStyles'\r\n// import {StyleSheet} from 'react-native'\r\n\r\nexport default class BottomButtom extends Component {\r\n    render() {\r\n        var {isWorkspaceChosen} = this.props\r\n        if (!isWorkspaceChosen) {\r\n            return(\r\n                <Button style={styles.button}\r\n                        onPress={() => this.props.setParamsSelected(true)}>\r\n                    <Text style={styles.edgeBlockText}>Select workspace</Text>\r\n                </Button>\r\n            )\r\n        } else {\r\n            return(\r\n                <Button style={styles.button}\r\n                        onPress={() => this.props.leaveButtonPressed()}>\r\n                    <Text style={styles.edgeBlockText}>Leave workspace</Text>\r\n                </Button>\r\n            )\r\n        }\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport {View, StyleSheet} from 'react-native'\r\nimport {Button, Text, Container} from 'native-base'\r\nimport ParameterButton from './ParameterButton'\r\nimport styles from './ParametersStyles'\r\nimport BottomButton from './BottomButton'\r\n\r\nexport default class WorkspaceParameters extends Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    \r\n    render() {\r\n        var { chosenParameters } = this.props\r\n        var { changeChosenParams } = this.props\r\n        var { isWorkspaceChosen } = this.props\r\n        return(\r\n            <Container style={{flex: 7, backgroundColor: 'rgba(211, 211, 211, 0.4)'}}>\r\n                <View style={styles.edgeBlock}>\r\n                    <Button full disabled style={{backgroundColor: 'rgba(39, 171, 227, 1)', height: '75%'}}>\r\n                        <Text style={styles.edgeBlockText}>\r\n                            {isWorkspaceChosen ? 'Chosen parameters' : 'Choose parameters'}\r\n                        </Text>\r\n                    </Button>\r\n                </View>\r\n\r\n                <View style={styles.centerBlock}>\r\n                    <ParameterButton name='Parameter #1' index={0} chosenParams={chosenParameters}\r\n                                        changeChosenParams={changeChosenParams}\r\n                                        isWorkspaceChosen={isWorkspaceChosen}/>\r\n                    <ParameterButton name='Parameter #2' index={1} chosenParams={chosenParameters}\r\n                                        changeChosenParams={changeChosenParams}\r\n                                        isWorkspaceChosen={isWorkspaceChosen}/>\r\n                    <ParameterButton name='Parameter #3' index={2} chosenParams={chosenParameters}\r\n                                        changeChosenParams={changeChosenParams}\r\n                                        isWorkspaceChosen={isWorkspaceChosen}/> \r\n                    <ParameterButton name='Parameter #4' index={3} chosenParams={chosenParameters}\r\n                                        changeChosenParams={changeChosenParams}\r\n                                        isWorkspaceChosen={isWorkspaceChosen}/> \r\n                </View>\r\n\r\n                <View style={styles.edgeBlock}>\r\n                    <BottomButton isWorkspaceChosen={isWorkspaceChosen}\r\n                                    setParamsSelected={this.props.setParamsSelected}\r\n                                    leaveButtonPressed={this.props.leaveButtonPressed} />\r\n                </View>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n// const styles = StyleSheet.create({\r\n//     edgeBlock: {\r\n//         flex: 1,\r\n//         alignItems: 'center',\r\n//         justifyContent: 'center'\r\n//     },\r\n\r\n//     edgeBlockText: {\r\n//         color: 'white',\r\n//         fontFamily: 'roboto-light'\r\n//     },\r\n\r\n//     centerBlock: {\r\n//         // backgroundColor: 'green',\r\n//         flex: 5,\r\n//         width: '80%',\r\n//         alignSelf: 'center',\r\n//         alignItems: 'baseline',\r\n//         flexDirection: 'row',\r\n//         alignContent: 'space-around',\r\n//         justifyContent: 'space-around',\r\n//         flexWrap: 'wrap'\r\n//     }\r\n\r\n// })","import React, { Component } from 'react';\r\nimport { Animated, Easing } from 'react-native';\r\nimport { G } from 'react-native-svg';\r\n\r\nconst AnimatedG = Animated.createAnimatedComponent(G);\r\n\r\nfunction flattenStyle(style) {\r\n    if (style === null || typeof style !== 'object') {\r\n        return undefined;\r\n    }\r\n\r\n    if (!Array.isArray(style)) {\r\n        return style;\r\n    }\r\n\r\n    const result = {};\r\n    for (let i = 0, styleLength = style.length; i < styleLength; ++i) {\r\n        const computedStyle = flattenStyle(style[i]);\r\n        if (computedStyle) {\r\n            for (const key in computedStyle) {\r\n                result[key] = computedStyle[key];\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * A wrapper for making svg elements respond properly to touches.\r\n * On press down, the opacity of the wrapped element is decreased, dimming it.\r\n *\r\n * Opacity is controlled by wrapping the children in an Animated.G, which is\r\n * added to the view hierarchy.\r\n *\r\n * Example:\r\n *\r\n * ```\r\n * renderRect: function() {\r\n *   return (\r\n *     <TouchableOpacityG\r\n *       onPress={e => {\r\n *         console.log('press', e);\r\n *       }}>\r\n *       <Rect x=\"0\" y=\"50\" width=\"100\" height=\"50\" fill=\"blue\" />\r\n *     </TouchableOpacityG>\r\n *   );\r\n * },\r\n * ```\r\n * ### Example\r\n *\r\n * ```ReactNativeWebPlayer\r\n * import React from \"react\";\r\n * import {\r\n *   AppRegistry,\r\n * } from 'react-native'\r\n * import Svg, {\r\n *     Rect,\r\n * } from \"react-native-svg\";\r\n *\r\n * import TouchableOpacityG from './TouchableOpacityG';\r\n *\r\n * const App = () => (\r\n *     <Svg width=\"200\" height=\"200\" viewBox=\"0 0 100 100\">\r\n *         <Rect\r\n *             x=\"0\"\r\n *             y=\"0\"\r\n *             width=\"100\"\r\n *             height=\"50\"\r\n *             fill=\"red\"\r\n *             onPress={e => {\r\n *                 console.log('press1', e);\r\n *             }}\r\n *         />\r\n *         <TouchableOpacityG\r\n *             onPress={e => {\r\n *                 console.log('press2', e);\r\n *             }}>\r\n *             <Rect x=\"0\" y=\"50\" width=\"100\" height=\"50\" fill=\"blue\" />\r\n *         </TouchableOpacityG>\r\n *     </Svg>\r\n * );\r\n *\r\n * AppRegistry.registerComponent('App', () => App)\r\n * ```\r\n *\r\n */\r\nexport default class TouchableOpacityG extends Component {\r\n    static defaultProps = {\r\n        activeOpacity: 0.2,\r\n    };\r\n\r\n    componentDidUpdate = (prevProps, prevState) => {\r\n        if (this.props.disabled !== prevProps.disabled) {\r\n            this._opacityInactive(250);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Animate the touchable to a new opacity.\r\n     */\r\n    setOpacityTo = (value, duration) => {\r\n        Animated.timing(this.state.anim, {\r\n            toValue: value,\r\n            duration: duration,\r\n            easing: Easing.inOut(Easing.quad),\r\n            useNativeDriver: true,\r\n        }).start();\r\n    };\r\n\r\n    touchableHandleActivePressIn = e => {\r\n        if (e.dispatchConfig.registrationName === 'onResponderGrant') {\r\n            this._opacityActive(0);\r\n        } else {\r\n            this._opacityActive(150);\r\n        }\r\n        this.props.onPressIn && this.props.onPressIn(e);\r\n    };\r\n\r\n    touchableHandleActivePressOut = e => {\r\n        this._opacityInactive(250);\r\n        this.props.onPressOut && this.props.onPressOut(e);\r\n    };\r\n\r\n    touchableHandlePress = e => {\r\n        this.props.onPress && this.props.onPress(e);\r\n    };\r\n\r\n    touchableHandleLongPress = e => {\r\n        this.props.onLongPress && this.props.onLongPress(e);\r\n    };\r\n\r\n    _opacityActive = duration => {\r\n        this.setOpacityTo(this.props.activeOpacity, duration);\r\n    };\r\n\r\n    _opacityInactive = duration => {\r\n        this.setOpacityTo(this._getChildStyleOpacityWithDefault(), duration);\r\n    };\r\n\r\n    _getChildStyleOpacityWithDefault = () => {\r\n        const childStyle = flattenStyle(this.props.style) || {};\r\n        return childStyle.opacity == null ? 1 : childStyle.opacity;\r\n    };\r\n\r\n    state = {\r\n        anim: new Animated.Value(this._getChildStyleOpacityWithDefault()),\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <AnimatedG\r\n                opacity={this.state.anim}\r\n                onPress={this.touchableHandlePress}\r\n                onLongPress={this.touchableHandleLongPress}\r\n                onPressIn={this.touchableHandleActivePressIn}\r\n                onPressOut={this.touchableHandleActivePressOut}\r\n            >\r\n                {this.props.children}\r\n            </AnimatedG>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Svg, {\r\n    Text,\r\n    Rect,\r\n  } from 'react-native-svg';\r\nimport TouchableOpacityG from './TouchableOpacityG'\r\n\r\n\r\nexport default class WorkplaceOnMap extends Component {\r\n\r\n    setCoords = (x, y, width, orientation) => {\r\n        let x_text = 0\r\n        let y_text = 0\r\n        let x_circle = 0\r\n        let y_circle = 0\r\n        if (orientation == 'down') {\r\n            x_text = x + 0.425 * width\r\n            y_text = y + 0.375 * width\r\n            x_circle = x + 0.375 * width\r\n            y_circle = y + 0.625 * width\r\n        } else if (orientation == 'right') {\r\n            x_text = x + 0.25 * width\r\n            y_text = y + 0.575 * width\r\n            x_circle = x + 0.625 * width\r\n            y_circle = y + 0.375 * width\r\n        } else if (orientation == 'up') {\r\n            x_text = x + 0.425 * width\r\n            y_text = y + 0.8 * width\r\n            x_circle = x + 0.375 * width\r\n            y_circle = y + 0.125 * width\r\n        } else if (orientation == 'left') {\r\n            x_text = x + 0.625 * width\r\n            y_text = y + 0.575 * width\r\n            x_circle = x + 0.125 * width\r\n            y_circle = y + 0.375 * width\r\n        }\r\n\r\n        return [x_text, y_text, x_circle, y_circle]\r\n    }\r\n\r\n    render() {\r\n        const { x } = this.props\r\n        const { y } = this.props\r\n        const { width } = this.props\r\n        const { orientation } = this.props\r\n        const { num } = this.props\r\n        const coords = this.setCoords(x, y, width, orientation)\r\n        \r\n        return(\r\n            <TouchableOpacityG onPressIn={() => this.props.setSeat(num)}>                             \r\n                <Rect \r\n                    x={x} y={y} \r\n                    width={width} \r\n                    height={width} \r\n                    stroke=\"#0a3db3\" \r\n                    rx='3' \r\n                    opacity={this.props.setOpacity(num)}/>\r\n                <Text \r\n                    x={coords[0]} \r\n                    y={coords[1]} \r\n                    fontSize='10' \r\n                    fontWeight='bold'\r\n                    // fontFamily='roboto-light' \r\n                    fill='#27ABE3'\r\n                    >\r\n                    {num}\r\n                </Text>\r\n                <Rect \r\n                    x={coords[2]} \r\n                    y={coords[3]} \r\n                    width={width / 4} \r\n                    height={width / 4} \r\n                    fill={this.props.setStatusCircle(num)} \r\n                    rx={width / 8} />\r\n            </TouchableOpacityG>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport Svg, {\r\n    Rect,\r\n    Path,\r\n    Line\r\n  } from 'react-native-svg';\r\nimport WorkplaceOnMap from './WorkplaceOnMap'\r\nimport { AppRegistry } from 'react-native'\r\n\r\nexport default class Map extends Component {\r\n\r\n    setOpacity = num => {\r\n        if (num === this.props.seatNumber || this.props.seatNumber === null)\r\n            return '1'\r\n        else return '0.4'\r\n    }\r\n\r\n    setSeat = num => {\r\n        if (this.props.areParamsSelected && this.props.workspaceNumber === null) {\r\n            if (this.props.avialableSeats.indexOf(num) !== -1) {\r\n                this.props.setLocalSeat(num)\r\n            }\r\n            else alert('You cannot choose it!')\r\n        }\r\n    }\r\n\r\n    setStatusCircle = num => {\r\n        if (!this.props.areParamsSelected) \r\n            return '#0a3db3'\r\n        else if (this.props.avialableSeats.indexOf(num) === -1)\r\n            return 'red'\r\n        else return '#25E5B7'\r\n    }\r\n\r\n    * generator(coordsX, coordsY) {\r\n        for (let i = 0; i < coordsX.length - 1; ++i) {\r\n            yield React.createElement(\r\n                Line,\r\n                {\r\n                    key: i,\r\n                    x1: coordsX[i].toString(),\r\n                    y1: coordsY[i].toString(),\r\n                    x2: coordsX[i + 1].toString(),\r\n                    y2: coordsY[i + 1].toString(),\r\n                    stroke: 'red',\r\n                    strokeWidth: '2',\r\n                    strokeLinecap: 'round'\r\n                }\r\n            )\r\n        }      \r\n    }\r\n\r\n    render() { \r\n        let locationX = 50\r\n        let locationY = 150 // буду получать\r\n\r\n        let coordsX = [30, 30, 75, 75, 170, 170]  // буду получать\r\n        let coordsY = [170, 135, 135, 65, 65, 55]\r\n        let path = null\r\n        if (this.props.workspaceNumber !== null && this.props.seatNumber === 3 && !this.props.isWorkspaceChosen) {\r\n            path = [...this.generator(coordsX, coordsY)]\r\n        }\r\n\r\n        return(\r\n            <Svg  width='100%' height='100%' viewBox='0 0 200 200' fill=\"none\">\r\n\r\n                <WorkplaceOnMap x={10} y={10} width={40} num={1}\r\n                                orientation={'down'}\r\n                                setSeat={this.setSeat}\r\n                                setOpacity={this.setOpacity}\r\n                                setStatusCircle={this.setStatusCircle} />\r\n\r\n                <WorkplaceOnMap x={80} y={10} width={40} num={2}\r\n                                orientation={'down'}\r\n                                setSeat={this.setSeat}\r\n                                setOpacity={this.setOpacity}\r\n                                setStatusCircle={this.setStatusCircle} />\r\n\r\n                <WorkplaceOnMap x={150} y={10} width={40} num={3}\r\n                                orientation={'down'}\r\n                                setSeat={this.setSeat}\r\n                                setOpacity={this.setOpacity}\r\n                                setStatusCircle={this.setStatusCircle} />\r\n\r\n                <WorkplaceOnMap x={10} y={80} width={40} num={4}\r\n                                orientation={'right'}\r\n                                setSeat={this.setSeat}\r\n                                setOpacity={this.setOpacity}\r\n                                setStatusCircle={this.setStatusCircle} />\r\n\r\n                <WorkplaceOnMap x={100} y={80} width={40} num={5}\r\n                                orientation={'left'}\r\n                                setSeat={this.setSeat}\r\n                                setOpacity={this.setOpacity}\r\n                                setStatusCircle={this.setStatusCircle} />\r\n\r\n                <WorkplaceOnMap x={150} y={80} width={40} num={6}\r\n                                orientation={'down'}\r\n                                setSeat={this.setSeat}\r\n                                setOpacity={this.setOpacity}\r\n                                setStatusCircle={this.setStatusCircle} />\r\n\r\n                <WorkplaceOnMap x={80} y={150} width={40} num={7}\r\n                                orientation={'up'}\r\n                                setSeat={this.setSeat}\r\n                                setOpacity={this.setOpacity}\r\n                                setStatusCircle={this.setStatusCircle} />\r\n\r\n                <WorkplaceOnMap x={150} y={150} width={40} num={8}\r\n                                orientation={'up'}\r\n                                setSeat={this.setSeat}\r\n                                setOpacity={this.setOpacity}\r\n                                setStatusCircle={this.setStatusCircle} />\r\n\r\n                <Path id=\"Arrow1\" d=\"M30.3536 180.646C30.1583 180.451 29.8417 180.451 29.6464 180.646L26.4645 183.828C26.2692 184.024 26.2692 184.34 26.4645 184.536C26.6597 184.731 26.9763 184.731 27.1716 184.536L30 181.707L32.8284 184.536C33.0237 184.731 33.3403 184.731 33.5355 184.536C33.7308 184.34 33.7308 184.024 33.5355 183.828L30.3536 180.646ZM30.5 190V181H29.5V190H30.5Z\" fill=\"#27ABE3\"/>\r\n\r\n                <Rect x={locationX - 5} y={locationY - 5} height='6' width='6' fill='#27ABE3' rx='3' />\r\n                <Rect x={locationX - 6} y={locationY - 6} height='8' width='8' stroke='#27ABE3' rx='4' />\r\n                \r\n                {path}\r\n            </Svg>\r\n        )\r\n    }\r\n}\r\n\r\nAppRegistry.registerComponent('Map', () => Map)\r\n\r\n\r\n","import {StyleSheet} from 'react-native'\r\n\r\nconst styles = StyleSheet.create({\r\n    topBlock: {\r\n        flex: 1,\r\n        flexDirection: 'row',\r\n        // justifyContent: 'flex-end',\r\n        justifyContent: 'space-around',\r\n        alignItems: 'center',\r\n        shadowRadius: 1,\r\n        shadowOpacity: 0.1\r\n    },\r\n\r\n    bottomBlock: {\r\n        flex: 1,\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-evenly',\r\n        alignItems: 'center'\r\n    },\r\n\r\n    takeButton: {\r\n        backgroundColor: 'rgba(39, 171, 227, 1)',\r\n        height: '75%',\r\n        borderRadius: 8\r\n    },\r\n\r\n    anotherPlaceButton: {\r\n        backgroundColor: 'rgba(229, 38, 37, 1)',\r\n        height: '75%',\r\n        borderRadius: 8\r\n    },\r\n\r\n    buttonText: {\r\n        color: 'white',\r\n        fontFamily: 'roboto-light'\r\n    },\r\n\r\n    seatInput: {\r\n        backgroundColor: 'white', \r\n        height: '75%', \r\n        borderRadius: 8, \r\n        width: '20%',\r\n        maxWidth: 50,\r\n        justifyContent: 'center',\r\n        textAlign: 'center',\r\n        paddingHorizontal: 7,\r\n        color: 'rgba(10, 61, 179, 1.0)',\r\n    }\r\n})\r\n\r\nexport default styles","import React, { Component } from 'react'\r\nimport { View, TextInput } from 'react-native'\r\nimport { Button, Text } from 'native-base'\r\nimport styles from './MapWindowStyles'\r\n\r\nexport default class MapBottomButtons extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    \r\n    render() {\r\n        let { workspaceNumber } = this.props\r\n        let { areParamsSelected } = this.props\r\n        let { isWorkspaceChosen } = this.props\r\n        let { seatNumber } = this.props\r\n        if (workspaceNumber === null && areParamsSelected) {\r\n            return (\r\n                <View style={styles.bottomBlock}>\r\n                    <Button style={styles.takeButton} \r\n                            onPress={() => this.props.takePlacePressed()}>\r\n                        <Text style={styles.buttonText}>\r\n                            {seatNumber === null || isNaN(seatNumber) ? 'Choose number' : 'Take place ' + seatNumber}\r\n                        </Text>\r\n                    </Button>\r\n                    {/* <TextInput style={styles.seatInput}\r\n                            placeholder='№'\r\n                            onChangeText={val => this.props.setLocalSeat(parseInt(val))} \r\n                            /> */}\r\n                </View>\r\n\r\n            )\r\n        } else if (areParamsSelected && !isWorkspaceChosen) {\r\n            return (\r\n                <View style={styles.bottomBlock}>\r\n                    <Button style={styles.takeButton}\r\n                            onPress={() => this.props.changeWorkspace(this.props.seatNumber, true)}>\r\n                        <Text style={styles.buttonText}>\r\n                            Switch on\r\n                        </Text>\r\n                    </Button>\r\n                    <Button style={styles.anotherPlaceButton}\r\n                            onPress={() => this.props.changeWorkspace(null, false)}>\r\n                        <Text style={styles.buttonText}>\r\n                            Choose another\r\n                        </Text>\r\n                    </Button>\r\n                </View>\r\n            )\r\n        } else return <View style={styles.bottomBlock}></View>\r\n    }\r\n}","import React, {Component} from 'react'\r\nimport {View, TextInput} from 'react-native'\r\nimport {Button, Icon, Text, Container} from 'native-base'\r\nimport Map from './Map'\r\nimport styles from './MapWindowStyles'\r\nimport MapBottomButtons from './MapBottomButtons'\r\n\r\nexport default class MapWindow extends Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    state = {\r\n        seatNumber: this.props.workspaceNumber,\r\n        avialableSeats: [1, 3, 5, 7] // буду получать\r\n    }\r\n\r\n    setLocalSeat = (num) => {\r\n        this.setState({\r\n            seatNumber: num\r\n        })\r\n    }\r\n\r\n    takePlacePressed = () => {\r\n        let seat = this.state.seatNumber\r\n        if (seat === null) \r\n            alert(\"Chose workspace please!\")\r\n        else if (seat > 0 && seat <= 8) {\r\n            if (this.state.avialableSeats.indexOf(seat) !== -1) {\r\n                this.props.changeWorkspace(this.state.seatNumber, false)\r\n            } else {\r\n                alert(\"You can't chose it\")\r\n            }\r\n        }\r\n    }\r\n\r\n    showInput = () => {\r\n        if (this.props.areParamsSelected) {\r\n            return (\r\n                <View style={styles.topBlock}>\r\n                    <TextInput style={styles.seatInput}\r\n                                placeholder='№'\r\n                                onChangeText={val => this.setLocalSeat(parseInt(val))}\r\n                                maxLength={1}\r\n                                />\r\n                    <Button transparent icon style={{height: '100%'}}>\r\n                        <Icon name='navigate' style={{color: 'rgba(39, 171, 227, 1)', fontSize: 35}} />\r\n                    </Button>\r\n                </View>\r\n            )\r\n        } else return (\r\n            <View style={styles.topBlock}></View>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Container style={{flex: 7, backgroundColor: 'rgba(211, 211, 211, 0.4)' }}>\r\n                {/* <View style={styles.topBlock}>\r\n                    <Button transparent icon style={{height: '100%'}}>\r\n                        <Icon name='navigate' style={{color: 'rgba(39, 171, 227, 1)', fontSize: 35}} />\r\n                    </Button>\r\n                </View> */}\r\n                {this.showInput()}\r\n\r\n                <View style={{flex: 5, justifyContent: 'center', alignContent: 'center'}}>\r\n\r\n                    <Map workspaceNumber={this.props.workspaceNumber} \r\n                        changeWorkspace={this.props.changeWorkspace}\r\n                        setLocalSeat={this.setLocalSeat}\r\n                        avialableSeats={this.state.avialableSeats}\r\n                        areParamsSelected={this.props.areParamsSelected}\r\n                        isWorkspaceChosen={this.props.isWorkspaceChosen}\r\n                        seatNumber={this.state.seatNumber}/>\r\n        \r\n                </View>\r\n\r\n                <MapBottomButtons workspaceNumber={this.props.workspaceNumber}\r\n                                    areParamsSelected={this.props.areParamsSelected}\r\n                                    isWorkspaceChosen={this.props.isWorkspaceChosen}\r\n                                    seatNumber={this.state.seatNumber}\r\n                                    takePlacePressed={this.takePlacePressed}\r\n                                    changeWorkspace={this.props.changeWorkspace} \r\n                                    setLocalSeat={this.setLocalSeat}/>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {Component} from 'react'\r\nimport {View, StyleSheet, Alert } from 'react-native'\r\nimport { Button, Text, Container } from 'native-base'\r\n\r\nexport default class Workspace extends Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    confirmExit = () => {\r\n        // for app\r\n        //\r\n        // if (this.props.time === 0) {\r\n        //     Alert.alert(\r\n        //         'Are you sure?',\r\n        //         '',\r\n        //         [\r\n        //             {text: 'Yes', onPress: () => this.props.checkExit(true)},\r\n        //             {\r\n        //                 text: 'No', \r\n        //                 onPress: () => this.props.checkExit(false), \r\n        //                 style: 'cancel'\r\n        //             },\r\n        //         ],\r\n        //         {cancelable: true},\r\n        //     );\r\n        // } else {\r\n        //     alert('You should end your work!')\r\n        // }\r\n\r\n        \r\n        // for web\r\n        if (this.props.time === 0) {\r\n            if (confirm('Are you sure?')) {\r\n                this.props.checkExit(true)\r\n            }\r\n        } else {\r\n            alert('You should end your work!')\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Container style={{flex: 12, backgroundColor: 'rgba(211, 211, 211, 0.4)'}}>\r\n                <View style={{flex: 1}}></View>\r\n                <View style={styles.mainView}>\r\n\r\n                        <Button style={styles.button}>\r\n                            <Text style={styles.text}>View history</Text>\r\n                        </Button>\r\n                        <Button style={styles.button}>\r\n                            <Text style={styles.text}>Set default parameters</Text>\r\n                        </Button>\r\n                        <Button style={styles.button}>\r\n                            <Text style={styles.text}>Sth else</Text>\r\n                        </Button>\r\n\r\n                        <Button style={styles.exitButton}\r\n                                onPress={() => this.confirmExit()}>\r\n                            <Text style={styles.text}>Exit</Text>\r\n                        </Button>\r\n                  \r\n                </View>\r\n                <View style={{flex: 1}}></View>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    mainView: {\r\n        flex: 10,\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-start'\r\n    },\r\n\r\n    text: {\r\n        color: 'white',\r\n        fontFamily: 'roboto-light',\r\n        marginBottom: 0\r\n    },\r\n\r\n    button: {\r\n        backgroundColor: 'rgba(39, 171, 227, 1)', \r\n        height: '15%',\r\n        marginBottom: '3%',\r\n        width: '70%',\r\n        justifyContent: 'center',\r\n        borderRadius: 8,\r\n        maxWidth: 250\r\n        // alignContent: 'center',\r\n        // textAlignVertical: 'center'\r\n    },\r\n\r\n    exitButton: {\r\n        backgroundColor: 'rgba(229, 38, 37, 1)', \r\n        height: '15%',\r\n        width: '70%',\r\n        justifyContent: 'center',\r\n        borderRadius: 100,\r\n        maxWidth: 250\r\n    }\r\n})","import {StyleSheet} from 'react-native'\r\n\r\nconst headerStyles = StyleSheet.create({\r\n    header: {\r\n        backgroundColor: 'rgba(10, 61, 179, 1.0)',\r\n        height: '15%',\r\n        maxHeight: 80,\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        // marginBottom: '2%'\r\n        // shadowRadius: 5\r\n    },\r\n\r\n    left: {\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        marginLeft: '3%',\r\n        marginBottom: '1%'\r\n    },\r\n\r\n    right: {\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        marginBottom: '1%',\r\n        marginRight: '3%',\r\n    },\r\n\r\n    elem: {\r\n        alignItems: 'center',\r\n        marginBottom: '5%',\r\n        marginRight: '5%',\r\n        marginLeft: '3%'\r\n    },\r\n\r\n    text: {\r\n        color: 'white',\r\n        fontFamily: 'roboto-light',\r\n        fontSize: 15\r\n    }\r\n})\r\n\r\nexport default headerStyles\r\n","import React, { Component } from 'react'\r\nimport { View } from 'react-native'\r\nimport { Icon, Text } from 'native-base'\r\nimport headerStyles from './HeaderStyles'\r\n\r\nexport default class MainHeader extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    setWorkspaceText = () => {\r\n        const {workspaceNumber} = this.props\r\n        if (workspaceNumber === null) \r\n            return 'Not chosen'\r\n        else return workspaceNumber.toString()\r\n    }\r\n\r\n    setTimer = (timerOn) => {\r\n        if (timerOn) {\r\n            return(\r\n                <View style={headerStyles.left}>\r\n                    <Icon style={{color: 'white'}} name='alarm' />\r\n                    <Text style={headerStyles.text}>\r\n                        {this.props.timerTime}\r\n                    </Text>\r\n                </View>\r\n            )\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const {login} = this.props\r\n        return(\r\n            <View style={headerStyles.header}>\r\n                <View style={headerStyles.left}>\r\n                    <Icon style={{color: 'white'}} name='tv' />\r\n                    <Text style={headerStyles.text}>\r\n                        {this.setWorkspaceText()}\r\n                    </Text>\r\n                </View>\r\n\r\n                {this.setTimer(this.props.timerOn)}\r\n\r\n                <View style={headerStyles.right}>\r\n                    <Icon style={{ color: 'white'}} name='contact' />\r\n                    <Text style={[ headerStyles.text]}>\r\n                        {login.toString().length < 15 ? login : login.substr(0, 12) + '...'}\r\n                    </Text>\r\n                </View>\r\n            </View>\r\n        );\r\n    }\r\n}","import {StyleSheet} from 'react-native'\r\n\r\nconst timerStyles = StyleSheet.create({\r\n    mainView: {\r\n        flex: 7,\r\n        backgroundColor: 'gray',\r\n    },\r\n\r\n    block: {\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n\r\n    centerBlock: {\r\n        borderBottomColor: 'white',\r\n        borderBottomWidth: 2,\r\n        paddingBottom: '5%',\r\n    },\r\n\r\n    stopWatch: {\r\n        color: 'white',\r\n        fontSize: 40,\r\n        fontFamily: 'roboto-light'\r\n    },\r\n\r\n    edgeBlockText: {\r\n        fontFamily: 'roboto-light'\r\n    },\r\n\r\n    leaveButton: {\r\n        backgroundColor: 'rgba(229, 38, 37, 1)', \r\n        height: '75%'\r\n    },\r\n\r\n    yourTimeButton: {\r\n        backgroundColor: 'rgba(39, 171, 227, 1)', \r\n        height: '75%'\r\n    }\r\n})\r\n\r\nexport default timerStyles","import React, {Component} from 'react';\r\nimport { StyleSheet } from 'react-native';\r\nimport FooterMenu from './FooterMenu'\r\nimport { Container, Title , Header } from 'native-base';\r\nimport WorkspaceParameters from './ParamsWindow/WorkspaceParameters'\r\nimport MapWindow from './MapComponents/MapWindow'\r\nimport Settings from './Settings'\r\nimport MainHeader from './Header/MainHeader';\r\nimport SeatTimer from './Timer/SeatTimer'\r\n\r\n\r\nexport default class MainApp extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            window: 'workspace',\r\n            workspaceNumber: null,\r\n            isWorkspaceChosen: false,\r\n            areParamsSelected: false,\r\n            chosenParameters: [false, false, false, false],\r\n\r\n            timerOn: false,\r\n            timerStart: 0,\r\n            timerTime: 0,\r\n        }\r\n    }\r\n\r\n    changeWindow = e => {\r\n        this.setState({\r\n            window: e,\r\n        })\r\n    }\r\n\r\n    changeWorkspace = (num, switchFlag) => {\r\n        if (num !== null) {\r\n            this.setState({\r\n                workspaceNumber: num,\r\n            })\r\n        } else {\r\n            this.setState({\r\n                workspaceNumber: null,\r\n                isWorkspaceChosen: false,\r\n            })\r\n        }\r\n        if (switchFlag) this.startTimer()\r\n    }\r\n\r\n    startTimer = () => {\r\n        this.setState({\r\n            isWorkspaceChosen: true,\r\n            window: 'workspace',\r\n            timerOn: true,\r\n            timerTime: this.state.timerTime,\r\n            timerStart: Date.now() - this.state.timerTime\r\n        })\r\n        this.timer = setInterval(() => {\r\n            this.setState({\r\n                timerTime: Date.now() - this.state.timerStart\r\n            });\r\n        }, 1000);\r\n    }\r\n\r\n    leaveButtonPressed = () => {\r\n        if (confirm('Are you sure?')) {\r\n            alert( \"Your time:\\n\" + this.formatTime(this.state.timerTime))\r\n            this.setState({ \r\n                timerOn: false,\r\n                timerStart: 0,\r\n                timerTime: 0\r\n            });\r\n            clearInterval(this.timer);\r\n\r\n            this.changeWorkspace(null)\r\n            this.setParamsSelected(false)\r\n        }\r\n    }\r\n\r\n    formatTime = ms => {\r\n        let seconds = (\"0\" + (Math.floor(ms / 1000) % 60)).slice(-2);\r\n        let minutes = (\"0\" + (Math.floor(ms / 60000) % 60)).slice(-2);\r\n        let hours = (\"0\" + Math.floor(ms / 3600000)).slice(-2);\r\n        return (hours.toString() + \" : \" + minutes.toString() + \" : \" + seconds.toString())\r\n    }\r\n\r\n    setParamsSelected = flag => {\r\n        if (flag) {\r\n            this.setState({\r\n                areParamsSelected: true,\r\n                window: 'map'\r\n            })\r\n        } else {\r\n            this.setState({\r\n                areParamsSelected: false\r\n            })\r\n        }\r\n    }\r\n\r\n    changeChosenParams = index => {\r\n        var array = this.state.chosenParameters\r\n        if (!array[index]) {\r\n            array[index] = true\r\n        } else array[index] = false\r\n        this.setState({\r\n            chosenParameters: array\r\n        })\r\n    }\r\n\r\n    setMainWindow = () => {\r\n        if (this.state.window === 'workspace') {\r\n            // if (this.state.isWorkspaceChosen) \r\n            //     return <SeatTimer leaveButtonPressed={this.leaveButtonPressed}\r\n            //                         timerTime={this.state.timerTime}\r\n            //                         formatTime={this.formatTime}/>\r\n            // else return <WorkspaceParameters setParamsSelected={this.setParamsSelected}/>\r\n            return <WorkspaceParameters setParamsSelected={this.setParamsSelected}\r\n                                        chosenParameters={this.state.chosenParameters}\r\n                                        changeChosenParams={this.changeChosenParams}\r\n                                        isWorkspaceChosen={this.state.isWorkspaceChosen}\r\n                                        leaveButtonPressed={this.leaveButtonPressed}/>\r\n        } else if (this.state.window === 'map') {\r\n            return <MapWindow workspaceNumber={this.state.workspaceNumber} \r\n                                changeWorkspace={this.changeWorkspace}\r\n                                areParamsSelected={this.state.areParamsSelected}\r\n                                isWorkspaceChosen={this.state.isWorkspaceChosen}/>\r\n        } else if (this.state.window === 'settings') {\r\n            return <Settings checkExit={this.props.checkExit} time={this.state.timerTime}/>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                {/* <Header transparent style={styles.header}>\r\n                    <Title style={styles.title}>APP NAME</Title>\r\n                </Header> */}\r\n\r\n                <MainHeader login={this.props.login} workspaceNumber={this.state.workspaceNumber}\r\n                            timerOn={this.state.timerOn} timerTime={this.formatTime(this.state.timerTime)}/>\r\n\r\n                {this.setMainWindow()}\r\n\r\n                <FooterMenu changeWindow={this.changeWindow} \r\n                            currentState={this.state.window}\r\n                            isWorkspaceChosen={this.state.isWorkspaceChosen} />\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    header: {\r\n        backgroundColor: 'white',\r\n        alignItems: 'center'\r\n    },\r\n\r\n    title: {\r\n        color: 'rgba(35, 71, 152, 1.0)',\r\n        justifyContent: 'flex-end',\r\n        fontFamily: 'roboto-light'\r\n    }\r\n})\r\n","import React, { Component } from 'react'\r\nimport { View } from 'react-native'\r\nimport { Text, Button, Container } from 'native-base'\r\nimport timerStyles from './TimerStyles'\r\n\r\nexport default class SeatTimer extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n        const { timerTime } = this.props\r\n        return(\r\n            <Container style={timerStyles.mainView}> \r\n                <View style={[ {flex: 1}, timerStyles.block ]}>\r\n                    <Button full disabled style={timerStyles.yourTimeButton}>\r\n                            \r\n                        <Text style={timerStyles.edgeBlockText}>Your time</Text>\r\n                    </Button>\r\n                </View>\r\n\r\n                <View style={[ {flex: 5}, timerStyles.block ]}>\r\n                    <View style={timerStyles.centerBlock}>\r\n                        <Text style={timerStyles.stopWatch}>\r\n                            { this.props.formatTime(timerTime) }\r\n                        </Text>\r\n                    </View>\r\n                </View>\r\n\r\n                <View style={[ {flex: 1}, timerStyles.block ]}>\r\n                    <Button style={timerStyles.leaveButton}\r\n                            onPressIn={() => this.props.leaveButtonPressed()}>\r\n                        <Text style={timerStyles.edgeBlockText}>Leave workspace</Text>\r\n                    </Button>\r\n                </View>\r\n            </Container>\r\n            \r\n        )\r\n    }\r\n}","import AuthWindow from './SignIn/AuthWindow';\nimport MainApp from './MainApp/MainApp';\nimport React, {Component} from 'react';\n\nimport * as Font from 'expo-font'\n\nexport default class App extends Component {\n    state = {\n        renderView: 0,\n        login: '',\n        fontLoaded: false,\n        token: null\n    };\n\n    async componentDidMount() {\n        await Font.loadAsync({\n          'roboto-light': require('./assets/fonts/Roboto-Light.ttf'),\n          'Roboto_medium': require('./assets/fonts/Roboto-Medium.ttf')\n        });\n\n        this.setState({ fontLoaded: true })\n    }\n\n    checkData = (flag, someLogin, somePassword) => {\n        if (flag) {\n            fetch('http://4d4ee02e.ngrok.io', {\n                method: 'POST',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    username: someLogin,\n                    password: somePassword,\n                }),\n            })\n            .then((response) => response.json())\n            .then((responseJson) => {\n                // return responseJson.acception;\n                // return false\n                let data = responseJson.data\n                if (data != null) {\n                    this.setState({ \n                        renderView: 1,\n                        login: someLogin,\n                        token: data\n                    })\n                }\n                alert(data)\n            })\n            .catch((error) => {\n                // console.error(error);\n                alert(error)\n            });\n\n            // this.setState({ \n            //     renderView: 1,\n            //     login: someLogin\n            // })\n        }\n    }\n\n    checkExit = flag => {\n        if (flag) {\n            this.setState({\n                correctData: false,\n                login: '',\n                renderView: 0\n            })\n        }\n    }\n\n    render() {\n\n        if (this.state.fontLoaded) {\n            if (this.state.renderView === 1) {\n            return <MainApp login={this.state.login} checkExit={this.checkExit}/>\n            } else return <AuthWindow checkData={this.checkData}/>\n        } else return null\n        \n    }\n}\n\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"./fonts/Roboto-Light.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Roboto-Medium.ttf\";"],"sourceRoot":""}